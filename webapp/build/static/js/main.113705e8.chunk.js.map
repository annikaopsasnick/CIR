{"version":3,"sources":["components/Form.js","components/ListItem.js","components/CocktailList.js","components/Cocktail.js","components/ResultsContainer.js","App.js","reportWebVitals.js","index.js"],"names":["Form","inputs","setInputs","handleSubmit","handleChange","e","key","target","name","value","console","log","onSubmit","class","type","onChange","id","selected","for","ListItem","props","onClick","ViewCocktail","src","image_source","alt","ingredients","rating","CocktailList","cocktails","isList","className","map","c","index","image","Cocktail","replace","split","ingredient","i","Number","setIsList","icon","faTimesCircle","size","transform","color","starRatedColor","numberOfStars","starDimension","starSpacing","num_reviews","description","href","url","ResultsContainer","CurrentComponent","useState","cocktail","setCocktail","variant","setVariant","cocktail_name","updated_cocktail","find","App","results","updateResults","initialPage","updateInitialPage","result_contents","length","event","preventDefault","axios","post","then","response","cocktail_results","JSON","parse","data","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.113705e8.chunk.js","sourcesContent":["\n\nconst Form = ({inputs, setInputs, handleSubmit}) => {\n\n  // change input object based on user actions\n  function handleChange(e) { //output \n   let key = e.target.name;\n   let value = e.target.value;\n    inputs[key]= value;\n    setInputs({...inputs});\n    console.log(inputs);\n  }\n\n  // change input object for checkbox selection/de-selection\n  function handleChecked(e) {\n    let isChecked = e.target.checked\n    let key = e.target.name\n    let value = isChecked\n    inputs[key]= value;\n    setInputs({...inputs});\n    console.log(inputs);\n  }\n\n    return (\n      <form onSubmit={handleSubmit}>\n        <div class = \"input-pair\">\n          <label>\n            Search:\n            <input type=\"text\" name= \"query_string\" onChange={handleChange} />\n          </label>\n        </div>\n\n        <div class = \"input-pair\">\n          <label>\n            Base Spirit: \n          </label>\n          <select id=\"base_spirit\" name=\"base_spirit\" onChange={handleChange}>\n            <option value=\"nopref\" selected=\"selected\">No Preference</option>\n            <option value=\"vodka\">Vodka</option>\n            <option value =\"tequila\">Tequila</option>\n            <option value =\"gin\">Gin</option>\n            <option value =\"rum\">Rum</option>\n            <option value =\"whiskey\">Whiskey</option>\n            <option value =\"brandy\">Brandy</option>\n            <option value =\"liqueur\">Liqueur</option>\n            <option value =\"wine\">Wine</option>\n          </select>\n        </div>\n\n        {/* <label class=\"switch\">\n          Mocktail?\n          <input id=\"mock\" name=\"mocktail\" type=\"checkbox\" onChange={handleChecked}/>\n          <span class=\"slider round\"></span>\n        </label> */}\n        <div class = \"input-pair\">\n          <label for=\"temp\">Temperature Preference: </label>\n          <select name=\"temp\" id=\"temp\" onChange={handleChange}>\n            <option value=\"iced\">Iced</option>\n            <option value=\"hot\">Hot</option>\n            <option value=\"nopref\" selected=\"selected\">No Preference</option>\n          </select>\n        </div>\n\n        <button type=\"submit\" value=\"Submit\">Submit</button>\n      </form>\n    );\n  }\n\n\nexport default Form","import PropTypes from 'prop-types';\n\n\nconst ListItem = (props) => {\n  return (\n    <li>\n      <button onClick={() => {\n        props.ViewCocktail(props.name) // open specific cocktail details\n      }}>\n        <h2>{props.name}</h2>\n        <img src={props.image_source} alt=\"cocktail\" />\n        <p>{props.ingredients}</p>\n        <p>{props.rating}</p>\n      </button>\n    </li>\n  )\n\n}\n\nListItem.propTypes = {\n  ingredients: PropTypes.array.isRequired,\n  name: PropTypes.string.isRequired,\n  image_source: PropTypes.string.isRequired,\n  rating: PropTypes.number.isRequired,\n  ViewCocktail: PropTypes.func,\n  isList: PropTypes.bool,\n}\n\nexport default ListItem","\nimport ListItem from './ListItem';\nimport PropTypes from 'prop-types';\n\nconst CocktailList = ({ cocktails, ViewCocktail, isList }) => {\n  return (\n    <div className=\"CocktailList\">\n      <ul className=\"list\">\n        {cocktails.map((c, index) =>\n          <ListItem key={index}\n            ingredients={c.ingredients}\n            name={c.name}\n            image_source={c.image}\n            rating={c.rating}\n            ViewCocktail={ViewCocktail}\n            isList={isList} />\n        )}\n      </ul>\n    </div>\n  )\n\n}\n\nCocktailList.propTypes = {\n  cocktails: PropTypes.array.isRequired\n}\n\n\nexport default CocktailList","\nimport PropTypes from 'prop-types';\n// @ts-ignore\nimport StarRatings from 'react-star-ratings';\nimport { faWindowClose, faTimesCircle } from \"@fortawesome/free-regular-svg-icons\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\n\nconst Cocktail = (props) => {\n\n  // remove brackets and convert string to list \n  var ingredient_list = props.ingredients.replace(/[\\[\\]']+/g, '').split(\",\")\n  // construct list items from ingredients\n  const ingredients = ingredient_list.map((ingredient, i) => <li key={i}>{ingredient}</li>);\n\n  const rating = (props.rating == \"no_data\") ? 0 : Number(props.rating);\n\n\n  return (\n\n\n    <div className=\"Cocktail\">\n\n      <button onClick={() => props.setIsList(true)} //close back to list view\n        type=\"button\">\n        <span className=\"fa-layers fa-fw\">\n          <FontAwesomeIcon icon={faTimesCircle} size={'2x'}\n            transform=\"down-1 left-1\" />\n          <FontAwesomeIcon icon={faTimesCircle} size={'2x'} color=\"rgb(242, 253, 230)\" />\n        </span>\n\n\n      </button>\n\n      <div className=\"Cocktail-layout\">\n        <div className=\"column\">\n\n          <div className=\"col-item\">\n            <div className=\"row\">\n\n              <div className=\"Cocktail_title\">\n                <h1 className=\"Cocktail_name\">{props.name}</h1>\n                <span className=\"Cocktail_rating\">\n                  <StarRatings\n                    rating={rating}\n                    starRatedColor=\"rgb(228, 104, 61)\"\n                    numberOfStars={5}\n                    starDimension=\"14px\"\n                    starSpacing=\"2px\"\n                    name='rating'\n                  />\n                      Rating: {props.rating} · ‎{props.num_reviews} reviews\n                    </span>\n              </div>\n\n              <div className=\"image-container\">\n                <img className=\"Cocktail_image\" src={props.image_source} alt=\"cocktail\"></img>\n              </div>\n\n\n\n            </div>\n          </div>\n\n          <div className=\"col-item\">\n            <div className=\"row\">\n\n              <div className=\"text-box\" id=\"Ingredients\">\n                <h2 className=\"Cocktail_sub_title\">Ingredients</h2>\n                <ul className=\"Cocktail_ingredients\">\n                  {ingredients}\n                </ul>\n              </div>\n\n              <div className=\"text-box\" id=\"Description\">\n                <h2 className=\"Cocktail_sub_title\">Description</h2>\n                <p>{props.description}</p>\n                <a href={props.url} target=\"_blank\">go to recipe</a>\n              </div>\n\n\n            </div>\n\n\n          </div>\n\n        </div>\n\n\n      </div>\n    </div>\n  )\n\n}\n\n\nCocktail.propTypes = {\n  ingredients: PropTypes.array.isRequired,\n  description: PropTypes.array.isRequired,\n  name: PropTypes.string.isRequired,\n  url: PropTypes.string.isRequired,\n  image_source: PropTypes.string.isRequired,\n  rating: PropTypes.number.isRequired,\n  setIsList: PropTypes.func.isRequired,\n}\n\nexport default Cocktail;","\nimport CocktailList from './CocktailList'\nimport Cocktail from './Cocktail'\nimport PropTypes from 'prop-types';\nimport { useState } from 'react';\n\nconst ResultsContainer = ({ cocktails, isList }) => {\n\n\n  var default_cocktail_info = { 'ingredients': \"\", 'description': \"\", 'name': \"\", 'url': \"\", 'image_source': \"\", 'rating': 0, 'num_reviews': 0 }\n\n  // store cocktail info based on selection\n  const [cocktail, setCocktail] = useState(default_cocktail_info)\n\n  // toggle between list and cocktail view\n  const [variant, setVariant] = useState(isList)\n\n\n  const ViewCocktail = (cocktail_name) => {\n    setVariant(false) // exit list view \n    var updated_cocktail = cocktails.find(cocktail => cocktail.name == cocktail_name)\n    setCocktail(updated_cocktail);\n  }\n\n  var CurrentComponent; // one of CocktailList or Cocktail\n\n  if (variant) {\n    CurrentComponent = <CocktailList cocktails={cocktails} ViewCocktail={ViewCocktail} isList={variant} />;\n  } else {\n    CurrentComponent =\n      <Cocktail ingredients={cocktail.ingredients}\n        description={cocktail.description}\n        name={cocktail.name}\n        url={cocktail.url}\n        image_source={cocktail.image}\n        rating={cocktail.rating}\n        num_reviews={cocktail.num_reviews}\n        setIsList={setVariant} />\n  }\n\n  return (\n    <>\n      {CurrentComponent}\n    </>\n  )\n\n}\n\n// define property types of ResultsContainer (for debugging)\nResultsContainer.propTypes = {\n  cocktails: PropTypes.array.isRequired,\n  isList: PropTypes.bool.isRequired\n}\n\nexport default ResultsContainer","import './App.css';\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\n\nimport Form from './components/Form.js';\nimport ResultsContainer from './components/ResultsContainer.js';\n\n\nfunction App() {\n\n  const default_input = { 'temp': '', 'query_string': '', 'key_word': '', 'base_spirit': '', 'ingredients': [] }\n\n  const [inputs, setInputs] = useState(default_input)\n  const [results, updateResults] = useState([])\n  const [initialPage, updateInitialPage] = useState(true)\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    axios.post('/query', inputs) // send inputs to backend\n      .then((response) => {\n        console.log(response); // recieve relevant list of cocktails \n        console.log(\"it works!\")\n        var cocktail_results = JSON.parse(response.data.cocktails)\n        updateInitialPage(false)\n        updateResults(cocktail_results, () => console.log(\"results\", results))\n      }, (error) => {\n        console.log(error);\n      });\n  }\n\n  let result_contents = (results.length != 0 & !initialPage) ?\n    < ResultsContainer cocktails={results} isList={true} /> :\n    (initialPage) ? <div className=\"first-render\"></div> :\n      <div className=\"no-results\">No cocktails found</div>\n\n\n  return (\n\n    <div className=\"App\">\n\n      <body>\n        <section className=\"container\">\n\n          <div className=\"left\">\n            <h1 id=\"title\">What is your cocktail order?</h1>\n            <div className=\"form-container\">\n              < Form\n                inputs={inputs}\n                setInputs={setInputs}\n                handleSubmit={handleSubmit}\n              />\n\n            </div>\n\n          </div>\n          <div className=\"right\">\n            <div className=\"results-container\">\n              {result_contents}\n              {/* < ResultsContainer cocktails={results} isList={true} /> */}\n            </div>\n\n\n          </div>\n        </section>\n      </body>\n    </div>\n\n\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}